@using System.Net.Mail;
@using System.Net.Security;
@using System.Web.Helpers;
@using Microsoft.Web.Helpers;
@{
    Validation.Add("name", 
        Validator.Required("Please provide use with your name") 
        );
    Validation.Add("email", 
        Validator.Required("Please provide us with a valid email address"),
        Validator.Regex(@"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$", "Invalid format for an email address.")
        );
    Validation.Add("message", 
        Validator.Required("Please provide us with your question.") 
        );
    if (IsPost)
    {
        if (!ReCaptcha.Validate(ReCaptcha.PrivateKey)) {
            ModelState.AddError("ReCaptcha","The code entered doesn't match the image.");
        }

        if (ModelState.IsValid) {
            if (Validation.IsValid())
            {
                try {
                    // Send email
                    WebMail.Send(
                        to: "info@ohiomensoxroast.org",
                        subject: Request["Subject"],
                        body: Request["Message"],
                        from: Request["Email"]
                    );

                    <p class="success-msg">Your email has been successfully sent</p> 
                } catch {
                   ModelState.AddFormError("Sorry, we are unable to send any emails at this time for assitance please contact us at info@ohiomensoxroast.org"); 
                }
                
               /* var email = Request["Email"];       
                var subject = Request["Subject"];       
                var message = Request["Message"];       
                using (var client = new SmtpClient())
                {
            
                     var msg = new MailMessage();
                     msg.From = new MailAddress(email);
                     msg.To.Add("info@ohiomensoxroast.org");
                     msg.Subject = subject;
                     msg.Body = message;

                     client.EnableSsl = false;
                     ServicePointManager.ServerCertificateValidationCallback = delegate(object s, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { return true; };

                     client.Send(msg);
                     <p class="success-msg">Your email has been successfully sent</p>
                 }*/
             } else {
                 ModelState.AddFormError("You must resolve the following errors:");
             }
         }
     }
}

<form action="" method="post">
    @Html.ValidationSummary()
    <fieldset>
        @Html.Label("Name", "name")
        @Html.TextBox("name",Request["name"],new {required="required", placeholder="Name"})

        @Html.Label("Email Address", "email")
        @Html.TextBox("email",Request["email"],new {required="required", placeholder="Email Address"})

        @Html.Label("Question?", "message")
        @Html.TextArea("message",Request["message"],new {required="required", placeholder="Question?", spellcheck="spellcheck"})

        @ReCaptcha.GetHtml(ReCaptcha.PublicKey, theme: "white")

        <input type="submit" value="Send" class="submit" />
    </fieldset> 
</form>
