@using System;
@using System.IO;
@using System.Text;
@using System.Text.RegularExpressions;
@using System.Net;
@using System.Web;
@using System.Collections.Specialized;
@using System.Dynamic;
@using SD = Simple.Data;
@using System.Web.Mvc;
@using System.Web.Helpers;
@{

    Validation.Add("firstname", 
        Validator.Required("Please provide a first name"), 
        Validator.StringLength(100, 0, "Your first name can't be more than 100 characters long.")
        );
    Validation.Add("lastname", 
        Validator.Required("Please provide a last name"), 
        Validator.StringLength(100, 0, "Your last name can't be more than 100 characters long.")
        );
    Validation.Add("PAYMENTREQUEST_0_SHIPTOSTREET", 
        Validator.Required("Please provide a street address"), 
        Validator.StringLength(200, 0, "Your street address can't be more than 200 characters long.")
        );
    Validation.Add("PAYMENTREQUEST_0_SHIPTOCITY", 
        Validator.Required("Please provide a city"), 
        Validator.StringLength(200, 0, "Your city can't be more than 200 characters long.")
        );
    Validation.Add("PAYMENTREQUEST_0_SHIPTOZIP", 
        Validator.Required("Please provide a zip code."),
        Validator.StringLength(10, 0, "Your zip can't be more than 10 characters long."),
        Validator.Regex(@"^\d{5}(-\d{4})?$", "Invalid zip code format (e.g., 99999-9999 or 99999)") 
        );
    Validation.Add("PAYMENTREQUEST_0_SHIPTOPHONENUM",
        Validator.StringLength(15, 0, "Your zip can't be more than 15 characters long."),
        Validator.Regex(@"^(1?)(-| ?)(\()?([0-9]{3})(\)|-| |\)-|\) )?([0-9]{3})(-| )?([0-9]{4}|[0-9]{4})$", "Invalid phone number format (e.g., 14165551212, 4165551212, (416)5551212, 416 555 1212, 416-555-1212, (416)-555-1212, (416) 555 1212, or 1-900-888-1212)") 
        );
   Validation.Add("EMAIL", 
        Validator.Required("Please provide us with a valid email address"),
        Validator.Regex(@"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$", "Invalid format for an email address.")
        );
    Validation.Add("church-atteding",
        Validator.StringLength(4000, 0, "Your zip can't be more than 4000 characters long.")
        );
    Validation.Add("num-att-two-day", 
        Validator.Range(0,21, "You can not purchase more than 20 at a time.")
        );
    Validation.Add("num-att-one-day", 
        Validator.Range(0,21, "You can not purchase more than 20 at a time.")
        );
    Validation.Add("num-att-underage", 
        Validator.Range(0,21, "You can not purchase more than 20 at a time.")
        );
    Validation.Add("num-golfing", 
        Validator.Range(0,21, "You can not purchase more than 20 at a time.")
        );
    Validation.Add("num-paintballing", 
        Validator.Range(0,21, "You can not purchase more than 20 at a time.")
        );
    Validation.Add("num-fishing", 
        Validator.Range(0,21, "You can not purchase more than 20 at a time.")
        );

    int guestCount = 0;
    string guestList = "";

    if (IsPost) {
        int finalGuestCount = 0;
        bool invalidGuestNameInputs = false;
        int twoDayCount = Request["num-att-two-day"].IsEmpty() ? 0 : int.Parse(Request["num-att-two-day"]);
        int oneDayCount = Request["num-att-one-day"].IsEmpty() ? 0 : int.Parse(Request["num-att-one-day"]);
        int underageCount = Request["num-att-underage"].IsEmpty() ? 0 : int.Parse(Request["num-att-underage"]);

        int golfCount = Request["num-golfing"].IsEmpty() ? 0 : int.Parse(Request["num-golfing"]);
        int paintballCount = Request["num-paintballing"].IsEmpty() ? 0 : int.Parse(Request["num-paintballing"]);
        int fishingCount = Request["num-fishing"].IsEmpty() ? 0 : int.Parse(Request["num-fishing"]);

        int totalMarkedForRegistration = twoDayCount + oneDayCount + underageCount;
        bool invalidRegistrationCount = false;

        NameValueCollection postedForm = new NameValueCollection(Request.Form); //Create new name/value collection from form data

        guestCount = Request["guest-count"].IsEmpty() ? 0 : int.Parse(Request["guest-count"]);
        
        guestList = Request["guestList"];
        
        if (guestList != "") {
            finalGuestCount = guestList.Split(new string[] { ";" }, StringSplitOptions.None).Length;
        }

        @finalGuestCount
        @guestCount
        if (finalGuestCount >=1 && finalGuestCount != guestCount) {
            invalidGuestNameInputs = true;
        } else {
            if ((finalGuestCount + 1) != totalMarkedForRegistration) {
                invalidRegistrationCount = true;
            }
        }

        if (Validation.IsValid() && !Request["PAYMENTREQUEST_0_AMT"].IsEmpty() && !Request["PAYMENTREQUEST_0_SHIPTOSTATE"].IsEmpty() && !invalidGuestNameInputs && !invalidRegistrationCount) {

            //Remove any unnessary fields before sending data to PayPal
            postedForm.Remove("firstname");
            postedForm.Remove("lastname");
            postedForm.Remove("church-atteding");
            postedForm.Remove("guest-count");
            postedForm.Remove("num-att-two-day");
            postedForm.Remove("num-att-two-day-price");
            postedForm.Remove("num-att-one-day");
            postedForm.Remove("num-att-one-day-price");
            postedForm.Remove("num-att-underage");
            postedForm.Remove("num-att-underage-price");
            postedForm.Remove("num-golfing");
            postedForm.Remove("num-golfing-price");
            postedForm.Remove("num-paintballing");
            postedForm.Remove("num-paintballing-price");
            postedForm.Remove("num-fishing");
            postedForm.Remove("num-fishing-price");
            postedForm.Remove("guestList");
            postedForm.Remove("guest_firstname");
            postedForm.Remove("guest_lastname");
       
            //Add required data sensitive fields before sending data to PayPal
            postedForm.Set("USER", App.PayPalUser);
            postedForm.Set("PWD", App.PayPalPassword);
            postedForm.Set("SIGNATURE", App.PayPalSignature);
            postedForm.Set("METHOD", App.ExpressCheckoutMethod);
            postedForm.Set("VERSION", App.ExpressCheckoutVersion);
            postedForm.Set("PAYMENTREQUEST_0_PAYMENTACTION", App.ExpressCheckoutPaymentAction);
            postedForm.Set("PAYMENTREQUEST_0_CURRENCYCODE", App.ExpressCheckoutCurrencyCode);
            postedForm.Set("RETURNURL", App.ExpressCheckoutReturnUrl);
            postedForm.Set("CANCELURL", App.ExpressCheckoutCancelUrl);

            //Build query string from name/value collection using StringBuilder
            var formSB = new StringBuilder();
            var postedFormItems = postedForm.AllKeys.SelectMany(postedForm.GetValues, (k, v) => new {key = k, value = v});

            foreach(var item in postedFormItems) {
                formSB.AppendFormat("{0}={1}&", item.key, HttpUtility.UrlEncode(item.value.ToString()));
            }

            formSB.Remove(formSB.Length - 1, 1); // remove the last '&'

            //Do Post
            DoPostPayPalData doPostToPayPal = new DoPostPayPalData(formSB.ToString(), App.ProdPayInfoUrl);
            string response = doPostToPayPal.Post();

            NameValueCollection responseObj = HttpUtility.ParseQueryString(response); //Parse server response
 
            if (responseObj.Get("ACK") == "Success") {
                string token = responseObj.Get("TOKEN");
                string expressCheckoutCmd = "_express-checkout";

                try { 
                   Regex regexObj = new Regex(@"[^\d]");
                   var confirmID = regexObj.Replace(token, "");

                   Regex phoneNumberRegexObj = new Regex(@"(?<!^)\+|[^\d]");
                   long ? phoneNumber = Request["PAYMENTREQUEST_0_SHIPTOPHONENUM"].IsEmpty() ? (long?)null : long.Parse(phoneNumberRegexObj.Replace(Request["PAYMENTREQUEST_0_SHIPTOPHONENUM"], "").Trim());
                   
                   Regex gTotalRegexObj = new Regex(@"\$");
                   int gTotal = int.Parse(gTotalRegexObj.Replace(Request["PAYMENTREQUEST_0_AMT"], "").Trim());

                   dynamic reg = new ExpandoObject();
                   reg.ID = confirmID;
                   reg.Attendee = Request["lastname"] + ", " + Request["firstname"];
                   reg.Address = Request["PAYMENTREQUEST_0_SHIPTOSTREET"];
                   reg.City = Request["PAYMENTREQUEST_0_SHIPTOCITY"];
                   reg.State = Request["PAYMENTREQUEST_0_SHIPTOSTATE"];
                   reg.Zip = Request["PAYMENTREQUEST_0_SHIPTOZIP"];
                   reg.Phone_Num = phoneNumber;
                   reg.Email = Request["EMAIL"];
                   reg.Church = Request["church-atteding"];
                   reg.Guests = guestList;

                   dynamic regDetails = new ExpandoObject();
                   regDetails.ID = confirmID;
                   regDetails.Num_Attending_Two_Days = twoDayCount;
                   regDetails.Num_Attending_One_Day = oneDayCount;
                   regDetails.Num_12andYounger_Attending = underageCount;
                   regDetails.Num_Golfing = golfCount;
                   regDetails.Num_Paintballing = paintballCount;
                   regDetails.Num_Fishing = fishingCount;
                   regDetails.Total_Paided = gTotal;

                   var db = SD.Database.OpenFile(Server.MapPath("~/App_Data/COGMOR.sdf"));

                   db.Registration.Insert(reg);
                   db.RegistrationDetails.Insert(regDetails);

                   Response.Redirect(App.ProdPayAuthUrl + "?cmd=" + expressCheckoutCmd + "&token=" + token);
                } catch (Exception ex) {
                    <p class="error">
                        Sorry, we can not continue processing your regestration request at this time. Please contact us at info@ohiomensoxroast.org for assisatance.
                    </p>
                }
            } else {
                <p class="error">
                    Sorry, we can not continue processing your regestration request at this time. Please contact us at info@ohiomensoxroast.org for assisatance.
                </p>
            }   
        } else {
           
            ModelState.AddFormError("You must resolve all errors before you can proceed.");

            if (Request["PAYMENTREQUEST_0_SHIPTOSTATE"].IsEmpty()) {
                ModelState.AddFormError("Please choose a state from the dropdown.");
            } 

            if (invalidGuestNameInputs) {
                ModelState.AddFormError("If you wish to register a guest please provide us with there first and last name; starting with the first guest fields you come to and adding more if needed.");
            }

            if (invalidRegistrationCount) {
                ModelState.AddFormError("The total number of guest plus yourself must match the total counts for registring for two day registration, one day registration, or underage registration");
            }  
        }
    }
}

<form action="" method="post">
    <h2>Registration</h2>
    @Html.ValidationSummary(true)
    <fieldset id="generalInfo">
        <div class="name-fields">
            @Html.ValidationMessage("firstname")
            @Html.TextBox("firstname",Request["firstname"],new {required="required", placeholder="First Name"})
            
            @Html.ValidationMessage("lastname")
            @Html.TextBox("lastname",Request["lastname"],new {required="required", placeholder="Last Name"})
        </div>
        @Html.ValidationMessage("PAYMENTREQUEST_0_SHIPTOSTREET")
        @Html.TextBox("PAYMENTREQUEST_0_SHIPTOSTREET",Request["PAYMENTREQUEST_0_SHIPTOSTREET"],new {required="required", placeholder="Address"})

        @Html.ValidationMessage("PAYMENTREQUEST_0_SHIPTOCITY")
        @Html.TextBox("PAYMENTREQUEST_0_SHIPTOCITY",Request["PAYMENTREQUEST_0_SHIPTOCITY"],new {required="required", placeholder="City"})
        
        @Html.ValidationMessage("PAYMENTREQUEST_0_SHIPTOSTATE")
        <select id="PAYMENTREQUEST_0_SHIPTOSTATE" name="PAYMENTREQUEST_0_SHIPTOSTATE">
            <option value="">State</option>
                @foreach (var state in GetStateDropdown.GetStates())
                {
                    <option value="@state.Key" @(Request["PAYMENTREQUEST_0_SHIPTOSTATE"] == state.Key ? " selected" : "")>@state.Value</option>
                }
        </select>
        
        @Html.ValidationMessage("PAYMENTREQUEST_0_SHIPTOZIP")
        @Html.TextBox("PAYMENTREQUEST_0_SHIPTOZIP",Request["PAYMENTREQUEST_0_SHIPTOZIP"],new {required="required", placeholder="Zip"})

        @Html.ValidationMessage("PAYMENTREQUEST_0_SHIPTOPHONENUM")
        @Html.TextBox("PAYMENTREQUEST_0_SHIPTOPHONENUM",Request["PAYMENTREQUEST_0_SHIPTOPHONENUM"],new {placeholder="Phone Number"})
        
        
        @Html.TextBox("EMAIL",Request["EMAIL"],new {placeholder="Email", type="email"})

        @Html.ValidationMessage("church-atteding")
        @Html.TextBox("church-atteding",Request["church-atteding"],new {placeholder="Church (Optional)"})
    </fieldset>
    <!-- ko stopBinding: true -->
    <fieldset id="guests">
        <h3>Guests</h3>
        <div>
            @if(guestCount < 1) {
                <h4 style="display: none">Guest Added</h4>
            } else {
                 <h4>Guest Added</h4>
            }
            <ul data-bind="foreach: guest">
                <li>
                    First Name: <span data-bind="text: $data.firstName" class="firstName"></span>
                    Last Name: <span data-bind="text: $data.lastName" class="lastName"></span>
                    <input type="button" value="Remove" class="remove-guest" data-bind="click: $parent.removeGuest"/>
                </li>
            </ul>
        </div>
        <input type="hidden" value="@guestList" id="guestList" name="guestList"/>
        <div class="first-last-name-fields">
            <label for="guest_firstname">First Name</label>
            <input id="guest_firstname" type="text" name="guest_firstname"/>
            <label for="guest_lastname">Last Name</label>
            <input id="guest_lastname" type="text" name="guest_lastname"/>
        </div>
        <input type="button" value="Add Guest" class="add-guest" data-bind="click: $data.addGuest, disable: $data.hasClickedTooManyTimes"/>
        <input id="guest-count" name="guest-count" type="hidden" value="@guestCount" data-initalVal="@guestCount" data-bind="value: $data.guestCount"/>
        <p data-bind="visible: $data.hasClickedTooManyTimes">
            You have reached the max number of guests you are allowed to register!
        </p>
    </fieldset>
    <!-- /ko -->
    <fieldset id="eventInfo">
        <p>
            *** You must have your guest and yourself registered for either two days, one day. 
            If your guest is under age please register them using the underage section and not in the two day or one day. 
            All ages under 12 will attend the same amount of days as their guardian. ***
        </p>
        <div>
            @Html.Label("Number attending Friday/Saturday", "num-att-two-day")
            @Html.TextBox("num-att-two-day",Request["num-att-two-day"],new Dictionary<string, object>(){{ "class", "qty" },{"data-bind", "value: $data.numAttTwoDaysQty, valueUpdate: 'afterkeydown'"}, {"type", "number"}, {"data-initalVal", Request["num-att-two-day"]}, {"min", "0"}})            

            <input id="num-att-two-day-price" type="hidden" name="num-att-two-day-price" value="@App.twoDayPrice" data-bind='value: $data.numAttTwoDaysPrice'/>
            <span>X $@App.twoDayPrice =</span><output name="num-att-two-day-output" data-bind="text: $data.numAttTwoDaysTotalFormated">@Request["num-att-two-day-output"]</output>
            @Html.ValidationMessage("num-att-two-day")
        </div>
        <div>
            @Html.Label("Number attending one day only", "num-att-one-day")
            @Html.TextBox("num-att-one-day",Request["num-att-one-day"],new Dictionary<string, object>(){{ "class", "qty" },{"data-bind", "value: $data.numAttOneDayQty, valueUpdate: 'afterkeydown'"}, {"type", "number"}, {"min", "0"}, {"data-initalVal", Request["num-att-one-day"]}}) 

            <input id="num-att-one-day-price" type="hidden" name="num-att-one-day-price" value="35" data-bind='value: $data.numAttOneDayPrice'/>
            <span>X $35 =</span><output name="num-att-one-day-output" data-bind="text: $data.numAttOneDayTotalFormated">@Request["num-att-one-day-output"]</output>
            @Html.ValidationMessage("num-att-one-day")
        </div>
        <div>
            @Html.Label("Number attending 12yrs old or younger", "num-att-underage")
            @Html.TextBox("num-att-underage",Request["num-att-underage"],new Dictionary<string, object>(){{ "class", "qty" },{"data-bind", "value: $data.numAttUnderageQty, valueUpdate: 'afterkeydown'"}, {"type", "number"}, {"min", "0"}, {"data-initalVal", Request["num-att-underage"]}}) 

            <input id="num-att-underage-price" type="hidden" name="num-att-underage-price" value="25" data-bind='value: $data.numAttUnderagePrice'/>
            <span>X $25 =</span><output name="num-att-underage-ouput" data-bind="text: $data.numAttUnderageTotalFormated">@Request["num-att-underage-ouput"]</output>
            @Html.ValidationMessage("num-att-underage")
        </div>
        <div>
            @Html.Label("Number playing golf", "num-golfing")
            @Html.TextBox("num-golfing",Request["num-golfing"],new Dictionary<string, object>(){{ "class", "qty" },{"data-bind", "value: $data.numGolfingQty, valueUpdate: 'afterkeydown'"}, {"type", "number"}, {"min", "0"}, {"data-initalVal", Request["num-golfing"]}}) 

            <input id="num-golfing-price" type="hidden" name="num-golfing-price" value="45" data-bind='value: $data.numGolfingPrice'/>
            <span>X $45 =</span><output name="num-golfing-ouput" data-bind="text: $data.numGolfingTotalFormated">@Request["num-golfing-ouput"]</output>
            @Html.ValidationMessage("num-golfing")
        </div>
        <div>
            @Html.Label("Number paintballing", "num-paintballing")
            @Html.TextBox("num-paintballing",Request["num-paintballing"],new Dictionary<string, object>(){{ "class", "qty" },{"data-bind", "value: $data.numPaintballingQty, valueUpdate: 'afterkeydown'"}, {"type", "number"}, {"min", "0"}, {"data-initalVal", Request["num-paintballing"]}}) 

            <input id="num-paintballing-price" type="hidden" name="num-paintballing-price" value="5" data-bind='value: $data.numPaintballingPrice'/>
            <span>X $5 =</span><output name="num-paintballing-ouput" data-bind="text: $data.numPaintballingTotalFormated">@Request["num-paintballing-ouput"]</output>
            @Html.ValidationMessage("num-paintballing")
        </div>
        <div>
            @Html.Label("Number fishing", "num-fishing")
            @Html.TextBox("num-fishing",Request["num-fishing"],new Dictionary<string, object>(){{ "class", "qty" },{"data-bind", "value: $data.numFishingQty, valueUpdate: 'afterkeydown'"}, {"type", "number"}, {"min", "0"}, {"data-initalVal", Request["num-fishing"]}}) 

            <input id="num-fishing-price" type="hidden" name="num-fishing-price" value="25" data-bind='value: $data.numFishingPrice'/>
            <span>X $25 =</span><output name="num-fishing-output" data-bind="text: $data.numFishingTotalFormated">@Request["num-fishing-output"]</output>
            @Html.ValidationMessage("num-fishing")
        </div>
        <label for="PAYMENTREQUEST_0_AMT" class="totalLabel">Total</label>
        <input id="PAYMENTREQUEST_0_AMT" type="hidden" name="PAYMENTREQUEST_0_AMT" data-bind="value: $data.grandTotal"/>
        <output id="total" name="total" data-bind="text: $data.grandTotal">@Request["total"]</output>
    </fieldset>
    <input type=submit class="submit" value=""/>
</form>
